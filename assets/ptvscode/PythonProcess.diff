@@ -21,7 +21,9 @@
 using System.Runtime.InteropServices;
 using System.Text;
 using System.Threading;
+using Microsoft.PythonTools.Analysis.Interpreter;
 using Microsoft.PythonTools.Parsing;
+using Microsoft.PythonTools.Parsing.Ast;
 using Microsoft.Win32;
 using Microsoft.Win32.SafeHandles;
 
@@ -225,12 +227,13 @@
             }
         }
 
-        public void SetExceptionInfo(bool breakAlways, ICollection<string> breakOn) {
+        public void SetExceptionInfo(int defaultBreakOnMode, ICollection<keyvaluepair<string, int="">&gt; breakOn) {
             _socket.Send(SetExceptionInfoCommandBytes);
-            _socket.Send(BitConverter.GetBytes(breakAlways ? 1 : 0));
+            _socket.Send(BitConverter.GetBytes(defaultBreakOnMode));
             _socket.Send(BitConverter.GetBytes(breakOn.Count));
-            foreach (var name in breakOn) {
-                SendString(_socket, name);
+            foreach (var item in breakOn) {
+                _socket.Send(BitConverter.GetBytes(item.Value));
+                SendString(_socket, item.Key);
             }
         }
 
@@ -278,6 +281,7 @@
                         case "SETL": HandleSetLineResult(socket); break;
                         case "CHLD": HandleEnumChildren(socket); break;
                         case "OUTP": HandleDebuggerOutput(socket); break;
+                        case "REQH": HandleRequestHandlers(socket); break;
                         case "DETC": _process_Exited(this, EventArgs.Empty); break; // detach, report process exit
                     }
                 }
@@ -286,12 +290,107 @@
             }
         }
 
+        private static string ToDottedNameString(Expression expr, PythonAst ast) {
+            NameExpression name;
+            MemberExpression member;
+            if ((name = expr as NameExpression) != null) {
+                return name.Name;
+            } else if ((member = expr as MemberExpression) != null) {
+                while (member.Target is MemberExpression) {
+                    member = (MemberExpression)member.Target;
+                }
+                if (member.Target is NameExpression) {
+                    return expr.ToCodeString(ast);
+                }
+            }
+            return null;
+        }
+
+        internal IList<tuple<int, int,="" ilist<string="">&gt;&gt; GetHandledExceptionRanges(string filename) {
+            PythonAst ast;
+            TryHandlerWalker walker = new TryHandlerWalker();
+            var statements = new List<tuple<int, int,="" ilist<string="">&gt;&gt;();
+
+            try {
+                using (var source = new FileStream(filename, FileMode.Open, FileAccess.Read, FileShare.Read)) {
+                    ast = Parser.CreateParser(source, LanguageVersion).ParseFile();
+                    ast.Walk(walker);
+                }
+            } catch (Exception ex) {
+                Debug.WriteLine("Exception in GetHandledExceptionRanges:");
+                Debug.WriteLine(string.Format("Filename: {0}", filename));
+                Debug.WriteLine(ex);
+                return statements;
+            }
+
+            foreach (var statement in walker.Statements) {
+                int start = statement.GetStart(ast).Line;
+                int end = statement.Body.GetEnd(ast).Line + 1;
+                var expressions = new List<string>();
+
+                if (statement.Handlers == null) {
+                    expressions.Add("*");
+                } else {
+                    foreach (var handler in statement.Handlers) {
+                        Expression expr = handler.Test;
+                        TupleExpression tuple;
+                        if (expr == null) {
+                            expressions.Clear();
+                            expressions.Add("*");
+                            break;
+                        } else if ((tuple = handler.Test as TupleExpression) != null) {
+                            foreach (var e in tuple.Items) {
+                                var text = ToDottedNameString(e, ast);
+                                if (text != null) {
+                                    expressions.Add(text);
+                                }
+                            }
+                        } else {
+                            var text = ToDottedNameString(expr, ast);
+                            if (text != null) {
+                                expressions.Add(text);
+                            }
+                        }
+                    }
+                }
+
+                if (expressions.Count &gt; 0) {
+                    statements.Add(new Tuple<int, int,="" ilist<string="">&gt;(start, end, expressions));
+                }
+            }
+
+
+            return statements;
+        }
+
+        private void HandleRequestHandlers(Socket socket) {
+            string filename = socket.ReadString();
+
+            Debug.WriteLine("Exception handlers requested for: " + filename);
+            var statements = GetHandledExceptionRanges(filename);
+
+            _socket.Send(SetExceptionHandlerInfoCommandBytes);
+            SendString(_socket, filename);
+
+            _socket.Send(BitConverter.GetBytes(statements.Count));
+
+            foreach (var t in statements) {
+                _socket.Send(BitConverter.GetBytes(t.Item1));
+                _socket.Send(BitConverter.GetBytes(t.Item2));
+
+                foreach (var expr in t.Item3) {
+                    SendString(_socket, expr);
+                }
+                SendString(_socket, "-");
+            }
+        }
+
         private void HandleDebuggerOutput(Socket socket) {
             int tid = socket.ReadInt();
             string output = socket.ReadString();
@@ -727,6 +826,7 @@
         private static byte[] GetChildrenCommandBytes = MakeCommand("chld");
         private static byte[] DetachCommandBytes = MakeCommand("detc");
         private static byte[] SetExceptionInfoCommandBytes = MakeCommand("sexi");
+        private static byte[] SetExceptionHandlerInfoCommandBytes = MakeCommand("sehi");
 
         private static byte[] MakeCommand(string command) {
             return new byte[] { (byte)command[0], (byte)command[1], (byte)command[2], (byte)command[3] };
